# Install Git hooks for this repository
# - Installs a pre-commit shim that invokes the PowerShell hook
# - Safe to re-run

param()

$ErrorActionPreference = 'Stop'

function Write-Info($m){ Write-Host $m -ForegroundColor Cyan }
function Write-Warn($m){ Write-Host $m -ForegroundColor Yellow }
function Write-Err($m){ Write-Host $m -ForegroundColor Red }

# Resolve repo root and hooks dir
$repoRoot = (& git rev-parse --show-toplevel) 2>$null
if (-not $repoRoot) { Write-Err "Not a git repository."; exit 1 }
$hooksDir = Join-Path $repoRoot ".git/hooks"
if (-not (Test-Path $hooksDir)) { New-Item -ItemType Directory -Path $hooksDir | Out-Null }

# Source hook path
$psHook = Join-Path $repoRoot "scripts/git-hooks/pre-commit.ps1"
if (-not (Test-Path $psHook)) { Write-Err "Hook script not found: $psHook"; exit 1 }

# Create a small shell shim so Git can run it as hooks/pre-commit
$shimPath = Join-Path $hooksDir "pre-commit"
$shim = @(
  "#!/usr/bin/env sh",
  "# Auto-generated by scripts/git-hooks/install.ps1",
  "exec pwsh -NoProfile -ExecutionPolicy Bypass -File '" + ($psHook -replace "'","'\''") + "'"
) -join "`n"
Set-Content -Path $shimPath -Value $shim -Encoding UTF8

# Ensure executable on POSIX; on Windows Git Bash it's not required but harmless
try { & git update-index --chmod=+x -- ".git/hooks/pre-commit" | Out-Null } catch {}

Write-Info "Installed pre-commit hook: $shimPath"
Write-Info "You can test it by committing any .cs change; it will run ./format.ps1 -Scope staged automatically."
